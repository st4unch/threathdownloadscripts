#!/usr/bin/env python3

import csv
import os
import json
import  requests
import logging.handlers

file_path = os.environ.get('logfile', '/data/splunk/var/log/splunk')
os.makedirs(file_path, exist_ok=True)
folderpath= os.environ.get('thfolder', '/data/splunk/etc/apps/thintell/appserver/static')
os.makedirs(folderpath, exist_ok=True)

logger = logging.getLogger('commands')
logger.propagate = False  # Prevent the log messages from being duplicated in the python.log file
logger.setLevel(logging.DEBUG)
file_handler = logging.handlers.RotatingFileHandler(file_path+"/abuse_intell.log",maxBytes=25000000, backupCount=5)
formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
file_handler.setFormatter(formatter)
logger.addHandler(file_handler)


data = {
            'query': 'get_recent',
                'selector': 'time',
                }

host='https://mb-api.abuse.ch/api/v1/'
try:
    file=requests.post(host, data=data, timeout=15)
    logger.info('Successfully opened '+host)
    logger.info(file)
except:
    file="failed"
    logger.info('Failed To Open '+host)
    pass
data = json.loads(file.text)
qstatus=data.get('query_status','')
if qstatus != 'ok':
    logger.info('Empty Body from '+host)
else:
    dat=data.get('data')
    logger.info('feed data downloaded, extraction starting...')
    feeds=[feed for feed in dat ]
    fieldnames = ['file_hash', 'file_name', 'description']
    with open(f'{folderpath}/abuse_ch_malware_feed.csv', 'w',encoding="utf-8",newline='') as file:
        logger.info(file_path+'/jesonresp.csv opened ')
        writer = csv.DictWriter(file, fieldnames=fieldnames)
        writer.writeheader()
        logger.info('headers writed')
        logger.info('feeds writing')
        for alarm in feeds:
            hash = alarm.get('sha256_hash', '')
            filename=alarm.get('file_name', '')
            signature=alarm.get('signature', '')
            writer.writerow({'file_hash':hash,'file_name':filename,'description':signature})
        logger.info('feeds writed')


